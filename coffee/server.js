// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var Hapi, Path, PathDefault, R, SysCommon, _, config, dataCommon, fs, i, ioHandler, numUsers, plugins, r, sendTask, sendTaskIO, server, socketServer, socketio, sysData, usernames;

  Hapi = require('hapi');

  Path = require('path');

  server = new Hapi.Server;

  usernames = [];

  numUsers = 0;

  _ = require('lodash');

  fs = require('fs');

  R = require('ramda');

  config = require(__dirname + '/config.js');

  r = require('rethinkdb');

  plugins = [
    {
      register: require('./routes/routes.js')
    }
  ];

  sysData = require('./common/LoadCsv.js');

  SysCommon = require('./common/SysCommon.js');

  dataCommon = require('./common/dataCommon.js');

  sysData.InitCarga();

  PathDefault = '/dist/src';

  i = 0;

  socketServer = void 0;

  server.connection({
    host: '192.168.1.111',
    port: 8000
  }, {
    cors: true
  }, {
    connections: {
      routes: {
        files: {
          relativeTo: Path.join(__dirname, PathDefault)
        }
      }
    }
  });

  socketio = require('socket.io')(server.listener);

  ioHandler = function(socket) {
    socketServer = socket;
    socket.on('sendtask', function(task) {
      sendTaskIO(task, socket);
    });
    socket.on('adduser', function(username) {
      socket.username = username;
      r.connect(config.rethinkdb).then(function(conn) {
        r.table('Sessions').insert({
          'username': username,
          'socketid': socket.id,
          'ipCliente': socket.client.conn.remoteAddress,
          'TimeInitConexion': socket.handshake.time,
          'reference': socket.handshake.headers.referer,
          'online': true
        }).run(conn);
      });
    });
    socket.on('deletetask', function(task) {
      r.connect(config.rethinkdb).then(function(conn) {
        _.map(task.actorSend, function(actor) {
          r.table('Sessions').filter({
            'username': actor,
            online: true
          }).run(conn).then(function(result) {
            return result.toArray();
          }).then(function(result) {
            _.map(result, function(s) {
              socket.broadcast.to(s.socketid).emit('deletetask', task);
            });
          });
        });
      });
    });
    socket.on('disconnect', function() {
      r.connect(config.rethinkdb).then(function(conn) {
        r.table('Sessions').filter({
          socketid: socket.id
        }).update({
          TimeOffConexion: socket.handshake.time,
          online: false
        }).run(conn);
      });
    });
  };

  socketio.on('connection', ioHandler);

  sendTask = function(event) {
    var NamesActor, actorName, emitTask;
    actorName = void 0;
    NamesActor = {};
    if (dataCommon.existsElement(sysData.Actor_Role(), 'actor', event.who) === true) {
      NamesActor = [event.who];
    } else {
      NamesActor = SysCommon.ActorByRole(event.who);
    }
    emitTask = {
      'event': event.event,
      'in': event['in'],
      'task': event.action + '_' + event.event,
      'use': event.use,
      'what': event.what,
      'how': event.how,
      'out': event.out,
      'actorSend': NamesActor,
      'TimeCreate': new Date
    };
    r.connect(config.rethinkdb).then(function(conn) {
      r.table('IssuedTask').insert(emitTask).run(conn).then(function(result) {
        emitTask.id = result.generated_keys[0];
        _.map(NamesActor, function(actorName) {
          r.table('Sessions').filter({
            'username': actorName,
            online: true
          }).run(conn).then(function(result) {
            return result.toArray();
          }).then(function(result) {
            _.map(result, function(s) {
              socketio.sockets.connected[s.socketid].emit('sendtask', emitTask);
            });
          });
        });
      });
    });
  };

  sendTaskIO = function(task, socket) {
    _.map(SysCommon.SearchEvent(task.event, task.out), function(event) {
      var NamesActor, emitTask;
      NamesActor = {};
      if (dataCommon.existsElement(sysData.Actor_Role(), 'actor', event.who) === true) {
        NamesActor = [event.who];
      } else {
        NamesActor = SysCommon.ActorByRole(event.who);
      }
      emitTask = {
        'event': event.event,
        'in': event['in'],
        'task': event.action + '_' + event.event,
        'use': event.use,
        'what': event.what,
        'how': event.how,
        'out': event.out,
        'actorSend': NamesActor,
        'TimeCreate': new Date
      };
      r.connect(config.rethinkdb).then(function(conn) {
        r.table('IssuedTask').insert(emitTask).run(conn).then(function(result) {
          emitTask.id = result.generated_keys[0];
          _.map(NamesActor, function(actorName) {
            r.table('Sessions').filter({
              'username': actorName,
              online: true
            }).run(conn).then(function(result) {
              return result.toArray();
            }).then(function(result) {
              _.map(result, function(s) {
                socket.broadcast.to(s.socketid).emit('sendtask', emitTask);
              });
            });
          });
        });
      });
    });
  };

  r.connect(config.rethinkdb).then(function(conn) {
    r.dbList().run(conn).then(function(dbList) {
      if (dbList.indexOf(config.rethinkdb.db) > -1) {
        server._rdbConn = conn;
        server.register(plugins, function(err) {
          if (err) {
            throw err;
          }
          server.start(function() {
            server.log('info', 'Server running at: ' + server.info.uri);
          });
        });
      } else {
        r.dbCreate(config.rethinkdb.db).run(conn);
        server._rdbConn = conn;
        server.start(function() {
          console.log('Server starter ', server.info.uri);
        });
      }
    });
  }).error(function(error) {
    console.log(err.message);
    process.exit(1);
  });

}).call(this);
